<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lecture Archive - CodeSpeak</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .archive-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 3rem 2rem;
            position: relative;
            z-index: 1;
        }

        .archive-header {
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 3rem;
            margin-bottom: 3rem;
            text-align: center;
        }

        .archive-header h2 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.75rem;
            letter-spacing: -0.02em;
        }

        .archive-header p {
            color: rgba(255, 255, 255, 0.6);
            font-size: 1.125rem;
        }

        .search-section {
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .search-bar {
            display: flex;
            gap: 1rem;
        }

        .search-bar input {
            flex: 1;
            padding: 1rem 1.25rem;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 12px;
            color: var(--pure-white);
            font-size: 1rem;
            transition: var(--transition-fast);
        }

        .search-bar input:focus {
            outline: none;
            background: rgba(255, 255, 255, 0.08);
            border-color: rgba(255, 255, 255, 0.4);
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.05);
        }

        .search-bar input::placeholder {
            color: rgba(255, 255, 255, 0.3);
        }

        .search-bar button {
            padding: 1rem 2rem;
            background: var(--pure-white);
            color: var(--primary-black);
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition-smooth);
        }

        .search-bar button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(255, 255, 255, 0.2);
        }

        .lecture-list {
            display: grid;
            gap: 1.25rem;
        }

        .lecture-card {
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 2rem;
            transition: var(--transition-fast);
        }

        .lecture-card:hover {
            background: rgba(255, 255, 255, 0.05);
            border-color: rgba(255, 255, 255, 0.2);
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
        }

        .lecture-info h3 {
            font-size: 1.375rem;
            margin: 0 0 0.75rem 0;
            font-weight: 600;
            letter-spacing: -0.01em;
        }

        .lecture-meta {
            display: flex;
            gap: 1.5rem;
            flex-wrap: wrap;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.5);
        }

        .lecture-meta span {
            display: flex;
            align-items: center;
            gap: 0.375rem;
        }

        .lecture-actions {
            display: flex;
            gap: 0.75rem;
            flex-shrink: 0;
        }

        .action-btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition-fast);
            white-space: nowrap;
        }

        .action-btn.view {
            background: var(--pure-white);
            color: var(--primary-black);
        }

        .action-btn.view:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(255, 255, 255, 0.2);
        }

        .action-btn.delete {
            background: rgba(255, 255, 255, 0.1);
            color: var(--pure-white);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .action-btn.delete:hover {
            background: rgba(255, 255, 255, 0.15);
            border-color: rgba(255, 255, 255, 0.4);
            transform: translateY(-2px);
        }

        .empty-state {
            text-align: center;
            padding: 6rem 2rem;
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
        }

        .empty-state h3 {
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }

        .empty-state p {
            color: rgba(255, 255, 255, 0.6);
            font-size: 1.125rem;
            margin-bottom: 2rem;
        }

        .empty-state .btn {
            display: inline-flex;
        }

        .pagination {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 2rem;
            flex-wrap: wrap;
        }

        .pagination button {
            min-width: 2.5rem;
            height: 2.5rem;
            padding: 0.5rem;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.7);
            border-radius: 8px;
            cursor: pointer;
            transition: var(--transition-fast);
            font-weight: 500;
        }

        .pagination button:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--pure-white);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .pagination button.active {
            background: var(--pure-white);
            color: var(--primary-black);
            border-color: var(--pure-white);
        }

        #loading {
            text-align: center;
            padding: 4rem 2rem;
        }

        #loading p {
            margin-top: 1rem;
            color: rgba(255, 255, 255, 0.6);
        }

        @media (max-width: 768px) {
            .lecture-card {
                flex-direction: column;
                align-items: flex-start;
            }

            .lecture-actions {
                width: 100%;
            }

            .action-btn {
                flex: 1;
            }
        }
    </style>
</head>
<body class="protected">
    <%- include('partials/header') %>

    <main class="archive-container">
        <div class="archive-header">
            <h2>Lecture Archive</h2>
            <p>View and search all your recorded lectures</p>
        </div>

        <div class="search-section">
            <div class="search-bar">
                <input
                    type="text"
                    id="search-input"
                    placeholder="Search lectures by title, subject, or keywords..."
                >
                <button id="search-btn">Search</button>
            </div>
        </div>

        <div id="loading" style="display: none;">
            <div class="spinner"></div>
            <p>Loading lectures...</p>
        </div>

        <div id="lecture-list" class="lecture-list"></div>

        <div id="empty-state" class="empty-state" style="display: none;">
            <h3>No lectures yet</h3>
            <p>Start recording a lecture to see it in your archive</p>
            <a href="/live" class="btn btn-primary">Start Recording</a>
        </div>

        <div id="pagination" class="pagination"></div>
    </main>

    <%- include('partials/footer') %>

    <script src="/js/auth.js"></script>
    <script>
        let currentPage = 1;
        const lecturesPerPage = 10;

        async function loadLectures(page = 1, search = '') {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('lecture-list').style.display = 'none';

            try {
                let url = `/api/lectures/history?page=${page}&limit=${lecturesPerPage}`;

                if (search) {
                    url = `/api/lectures/search?q=${encodeURIComponent(search)}`;
                }

                const response = await fetch(url, {
                    headers: authManager.getAuthHeader()
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error);
                }

                renderLectures(data.lectures);
                if (data.pagination) {
                    renderPagination(data.pagination);
                }

                if (data.lectures.length === 0) {
                    document.getElementById('empty-state').style.display = 'block';
                } else {
                    document.getElementById('empty-state').style.display = 'none';
                    document.getElementById('lecture-list').style.display = 'grid';
                }

            } catch (error) {
                console.error('Error loading lectures:', error);
                document.getElementById('empty-state').style.display = 'block';
            } finally {
                document.getElementById('loading').style.display = 'none';
            }
        }

        function renderLectures(lectures) {
            const container = document.getElementById('lecture-list');
            container.innerHTML = '';

            lectures.forEach(lecture => {
                const card = document.createElement('div');
                card.className = 'lecture-card';

                const duration = lecture.duration ? formatDuration(lecture.duration) : 'N/A';
                const date = new Date(lecture.startTime).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                });

                card.innerHTML = `
                    <div class="lecture-info">
                        <h3>${escapeHtml(lecture.title)}</h3>
                        <div class="lecture-meta">
                            <span>📚 ${escapeHtml(lecture.subject)}</span>
                            <span>⏱️ ${duration}</span>
                            <span>📅 ${date}</span>
                        </div>
                    </div>
                    <div class="lecture-actions">
                        <button class="action-btn view" onclick="viewLecture('${lecture._id}')">View</button>
                        <button class="action-btn delete" onclick="deleteLecture('${lecture._id}')">Delete</button>
                    </div>
                `;

                container.appendChild(card);
            });
        }

        function renderPagination(pagination) {
            const container = document.getElementById('pagination');
            container.innerHTML = '';

            for (let i = 1; i <= pagination.pages; i++) {
                const btn = document.createElement('button');
                btn.textContent = i;
                btn.className = i === pagination.page ? 'active' : '';
                btn.onclick = () => {
                    currentPage = i;
                    loadLectures(i);
                };
                container.appendChild(btn);
            }
        }

        function formatDuration(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;

            if (hours > 0) {
                return `${hours}h ${minutes}m`;
            }
            return `${minutes}m ${secs}s`;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        async function viewLecture(lectureId) {
            window.location.href = `/lecture/${lectureId}`;
        }

        async function deleteLecture(lectureId) {
            if (!confirm('Are you sure you want to delete this lecture?')) return;

            try {
                const response = await fetch(`/api/lectures/${lectureId}`, {
                    method: 'DELETE',
                    headers: authManager.getAuthHeader()
                });

                if (!response.ok) {
                    throw new Error('Failed to delete lecture');
                }

                loadLectures(currentPage);
            } catch (error) {
                console.error('Error deleting lecture:', error);
                alert('Failed to delete lecture');
            }
        }

        document.getElementById('search-btn').addEventListener('click', () => {
            const query = document.getElementById('search-input').value;
            loadLectures(1, query);
        });

        document.getElementById('search-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                document.getElementById('search-btn').click();
            }
        });

        loadLectures();
    </script>
</body>
</html>
